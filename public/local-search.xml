<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Scala执行Shell</title>
    <link href="/2023/09/10/Scala%E6%89%A7%E8%A1%8CShell/"/>
    <url>/2023/09/10/Scala%E6%89%A7%E8%A1%8CShell/</url>
    
    <content type="html"><![CDATA[<h1 id="Scala执行Shell"><a href="#Scala执行Shell" class="headerlink" title="Scala执行Shell"></a>Scala执行Shell</h1><p>在Scala中，可以使用以下几种方式执行shell命令：</p><h2 id="使用Java的ProcessBuilder类"><a href="#使用Java的ProcessBuilder类" class="headerlink" title="使用Java的ProcessBuilder类"></a>使用Java的<code>ProcessBuilder</code>类</h2><p>可以通过创建<code>ProcessBuilder</code>对象，并设置要执行的shell命令，然后使用<code>.start()</code>方法启动进程并执行命令。以下是一个示例代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> java.io._<br><br><span class="hljs-keyword">val</span> command = <span class="hljs-string">&quot;ls -l&quot;</span><br><span class="hljs-keyword">val</span> processBuilder = <span class="hljs-keyword">new</span> <span class="hljs-type">ProcessBuilder</span>(command.split(<span class="hljs-string">&quot;\\s+&quot;</span>): _*)<br><span class="hljs-keyword">val</span> process = processBuilder.start()<br><br><span class="hljs-keyword">val</span> inputStream = process.getInputStream<br><span class="hljs-keyword">val</span> reader = <span class="hljs-keyword">new</span> <span class="hljs-type">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">InputStreamReader</span>(inputStream))<br><br><span class="hljs-keyword">var</span> line: <span class="hljs-type">String</span> = <span class="hljs-literal">null</span><br><span class="hljs-keyword">while</span> (&#123;line = reader.readLine(); line != <span class="hljs-literal">null</span>&#125;) &#123;<br>  println(line)<br>&#125;<br><br>process.waitFor()<br></code></pre></td></tr></table></figure><p>这个示例中使用了<code>ls -l</code>命令来列出当前目录下的文件和文件夹。</p><h2 id="使用sys-process包"><a href="#使用sys-process包" class="headerlink" title="使用sys.process包"></a>使用<code>sys.process</code>包</h2><p>Scala提供了一个方便的<code>sys.process</code>包，可以使用其中的<code>Process</code>类来执行shell命令。以下是示例代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> sys.process._<br><br><span class="hljs-keyword">val</span> command = <span class="hljs-string">&quot;ls -l&quot;</span><br><span class="hljs-keyword">val</span> output = command.!!<br>println(output)<br></code></pre></td></tr></table></figure><p>这个示例中，<code>!!</code>操作符会执行shell命令并返回输出结果。</p><h2 id="使用scala-sys-process-Process类"><a href="#使用scala-sys-process-Process类" class="headerlink" title="使用scala.sys.process.Process类"></a>使用<code>scala.sys.process.Process</code>类</h2><p>和前面的方法类似，也是使用<code>Process</code>类执行shell命令。以下是示例代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> scala.sys.process._<br><br><span class="hljs-keyword">val</span> command = <span class="hljs-type">Seq</span>(<span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;-l&quot;</span>)<br><span class="hljs-keyword">val</span> process = <span class="hljs-type">Process</span>(command)<br><span class="hljs-keyword">val</span> output = process.!!<br>println(output)<br></code></pre></td></tr></table></figure><p>这个示例中使用了<code>Seq</code>来定义命令和参数，然后使用<code>!!</code>操作符执行命令并返回输出结果。</p><h2 id="使用java-lang-Runtime类"><a href="#使用java-lang-Runtime类" class="headerlink" title="使用java.lang.Runtime类"></a>使用<code>java.lang.Runtime</code>类</h2><p>Scala可以直接使用Java的<code>Runtime</code>类来执行shell命令。以下是示例代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> java.lang.<span class="hljs-type">Runtime</span><br><br><span class="hljs-keyword">val</span> command = <span class="hljs-string">&quot;ls -l&quot;</span><br><span class="hljs-keyword">val</span> runtime = <span class="hljs-type">Runtime</span>.getRuntime<br><span class="hljs-keyword">val</span> process = runtime.exec(command)<br><br><span class="hljs-keyword">val</span> inputStream = process.getInputStream<br><span class="hljs-keyword">val</span> reader = <span class="hljs-keyword">new</span> <span class="hljs-type">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">InputStreamReader</span>(inputStream))<br><br><span class="hljs-keyword">var</span> line: <span class="hljs-type">String</span> = <span class="hljs-literal">null</span><br><span class="hljs-keyword">while</span> (&#123;line = reader.readLine(); line != <span class="hljs-literal">null</span>&#125;) &#123;<br>  println(line)<br>&#125;<br><br>process.waitFor()<br></code></pre></td></tr></table></figure><p>这个示例中使用了<code>Runtime.getRuntime</code>获取当前运行时环境的<code>Runtime</code>对象，然后使用<code>exec</code>方法执行shell命令，并读取命令的输出结果。</p><h2 id="使用scala-sys-process-ProcessBuilder类"><a href="#使用scala-sys-process-ProcessBuilder类" class="headerlink" title="使用scala.sys.process.ProcessBuilder类"></a>使用<code>scala.sys.process.ProcessBuilder</code>类</h2><p>Scala的<code>sys.process</code>包还提供了<code>ProcessBuilder</code>类，它是对Java中的<code>ProcessBuilder</code>类的封装，提供了更加方便的链式调用方式。以下是示例代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> scala.sys.process._<br><br><span class="hljs-keyword">val</span> command = <span class="hljs-type">Seq</span>(<span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;-l&quot;</span>)<br><span class="hljs-keyword">val</span> processBuilder = <span class="hljs-type">Process</span>(command)<br>  .run(<span class="hljs-type">ProcessLogger</span>(line =&gt; println(line)))<br><br>processBuilder.exitValue()<br></code></pre></td></tr></table></figure><p>这个示例中使用了<code>Process</code>类的<code>run</code>方法来执行shell命令，同时通过<code>ProcessLogger</code>指定了命令输出的处理方式，这里简单地将每一行输出打印出来。最后使用<code>exitValue</code>方法获取命令的退出值。</p><p>这些方法都可以根据具体的需求选择适合的方式来执行shell命令。请根据实际情况选择合适的方法，并注意处理命令执行可能出现的异常情况。</p>]]></content>
    
    
    <categories>
      
      <category>各语言执行Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js执行Shell</title>
    <link href="/2023/09/10/Node%E6%89%A7%E8%A1%8CShell/"/>
    <url>/2023/09/10/Node%E6%89%A7%E8%A1%8CShell/</url>
    
    <content type="html"><![CDATA[<h1 id="Node-js执行Shell"><a href="#Node-js执行Shell" class="headerlink" title="Node.js执行Shell"></a>Node.js执行Shell</h1><p>在 Node.js 中执行 Shell 命令有多种方法。以下是几种常用的方法：</p><h2 id="child-process-模块："><a href="#child-process-模块：" class="headerlink" title="child_process 模块："></a><code>child_process</code> 模块：</h2><h3 id="使用-exec-方法执行-Shell-命令"><a href="#使用-exec-方法执行-Shell-命令" class="headerlink" title="使用 exec 方法执行 Shell 命令"></a>使用 exec 方法执行 Shell 命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; exec &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>);<br><br><span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;ls -a&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`执行命令出错: <span class="hljs-subst">$&#123;error&#125;</span>`</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`标准输出: <span class="hljs-subst">$&#123;stdout&#125;</span>`</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`错误输出: <span class="hljs-subst">$&#123;stderr&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="使用-spawn-方法执行-Shell-命令"><a href="#使用-spawn-方法执行-Shell-命令" class="headerlink" title="使用 spawn 方法执行 Shell 命令"></a>使用 spawn 方法执行 Shell 命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; spawn &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>);<br><br><span class="hljs-keyword">const</span> ls = <span class="hljs-title function_">spawn</span>(<span class="hljs-string">&#x27;ls&#x27;</span>, [<span class="hljs-string">&#x27;-a&#x27;</span>]);<br>ls.<span class="hljs-property">stdout</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`标准输出: <span class="hljs-subst">$&#123;data&#125;</span>`</span>);<br>&#125;);<br>ls.<span class="hljs-property">stderr</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`错误输出: <span class="hljs-subst">$&#123;data&#125;</span>`</span>);<br>&#125;);<br>ls.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">code</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`子进程退出码: <span class="hljs-subst">$&#123;code&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="execSync-方法："><a href="#execSync-方法：" class="headerlink" title="execSync 方法："></a><code>execSync</code> 方法：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; execSync &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>);<br><br><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-keyword">const</span> stdout = <span class="hljs-title function_">execSync</span>(<span class="hljs-string">&#x27;ls -a&#x27;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`标准输出: <span class="hljs-subst">$&#123;stdout&#125;</span>`</span>);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`执行命令出错: <span class="hljs-subst">$&#123;error&#125;</span>`</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="shelljs模块："><a href="#shelljs模块：" class="headerlink" title="shelljs模块："></a><code>shelljs</code>模块：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> shell = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;shelljs&#x27;</span>);<br><br><span class="hljs-comment">// 执行 Shell 命令，并获取输出</span><br><span class="hljs-keyword">const</span> result = shell.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;ls -a&#x27;</span>);<br><span class="hljs-keyword">if</span> (result.<span class="hljs-property">code</span> !== <span class="hljs-number">0</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`执行命令出错: <span class="hljs-subst">$&#123;result.stderr&#125;</span>`</span>);<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`标准输出: <span class="hljs-subst">$&#123;result.stdout&#125;</span>`</span>);<br></code></pre></td></tr></table></figure><h2 id="execa-模块"><a href="#execa-模块" class="headerlink" title="execa 模块"></a><code>execa</code> 模块</h2><p>提供了一个简单且强大的接口来执行外部命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> execa = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;execa&#x27;</span>);<br><br>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; stdout &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">execa</span>(<span class="hljs-string">&#x27;ls&#x27;</span>, [<span class="hljs-string">&#x27;-a&#x27;</span>]);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`标准输出: <span class="hljs-subst">$&#123;stdout&#125;</span>`</span>);<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`执行命令出错: <span class="hljs-subst">$&#123;error&#125;</span>`</span>);<br>  &#125;<br>&#125;)();<br></code></pre></td></tr></table></figure><h2 id="node-pty-模块"><a href="#node-pty-模块" class="headerlink" title="node-pty 模块"></a><code>node-pty</code> 模块</h2><p>这是一个伪终端的库，允许你与 Shell 进行交互式通信</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> os = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;os&#x27;</span>);<br><span class="hljs-keyword">const</span> pty = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-pty&#x27;</span>);<br><br><span class="hljs-keyword">const</span> shell = os.<span class="hljs-title function_">platform</span>() === <span class="hljs-string">&#x27;win32&#x27;</span> ? <span class="hljs-string">&#x27;cmd.exe&#x27;</span> : <span class="hljs-string">&#x27;bash&#x27;</span>;<br><span class="hljs-keyword">const</span> ptyProcess = pty.<span class="hljs-title function_">spawn</span>(shell, [], &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xterm-color&#x27;</span>,<br>  <span class="hljs-attr">cols</span>: <span class="hljs-number">80</span>,<br>  <span class="hljs-attr">rows</span>: <span class="hljs-number">30</span>,<br>  <span class="hljs-attr">cwd</span>: process.<span class="hljs-title function_">cwd</span>(),<br>  <span class="hljs-attr">env</span>: process.<span class="hljs-property">env</span><br>&#125;);<br><br>ptyProcess.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`输出: <span class="hljs-subst">$&#123;data&#125;</span>`</span>);<br>&#125;);<br><br>ptyProcess.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;ls -a\r&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="shelljs-exec-proxy-模块"><a href="#shelljs-exec-proxy-模块" class="headerlink" title="shelljs-exec-proxy 模块"></a><code>shelljs-exec-proxy</code> 模块</h2><p>这是一个对 <code>shelljs</code> 的封装，提供了更简洁的方式来执行 Shell 命令并处理输出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> shell = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;shelljs-exec-proxy&#x27;</span>);<br><br><span class="hljs-keyword">const</span> &#123; code, stdout, stderr &#125; = <span class="hljs-title function_">shell</span>(<span class="hljs-string">&#x27;ls -a&#x27;</span>);<br><span class="hljs-keyword">if</span> (code !== <span class="hljs-number">0</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`执行命令出错: <span class="hljs-subst">$&#123;stderr&#125;</span>`</span>);<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`标准输出: <span class="hljs-subst">$&#123;stdout&#125;</span>`</span>);<br></code></pre></td></tr></table></figure><h2 id="simple-git-模块"><a href="#simple-git-模块" class="headerlink" title="simple-git 模块"></a><code>simple-git</code> 模块</h2><p>这是一个用于管理 Git 仓库的库，它也提供了执行 Shell 命令的功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> simpleGit = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;simple-git&#x27;</span>);<br><br><span class="hljs-keyword">const</span> git = <span class="hljs-title function_">simpleGit</span>();<br>git.<span class="hljs-title function_">raw</span>([<span class="hljs-string">&#x27;ls-files&#x27;</span>, <span class="hljs-string">&#x27;-z&#x27;</span>], <span class="hljs-function">(<span class="hljs-params">error, result</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`执行命令出错: <span class="hljs-subst">$&#123;error&#125;</span>`</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`标准输出: <span class="hljs-subst">$&#123;result&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="ssh2-模块"><a href="#ssh2-模块" class="headerlink" title="ssh2 模块"></a><code>ssh2</code> 模块</h2><p>这是一个用于通过 SSH 执行 Shell 命令的库。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Client</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ssh2&#x27;</span>).<span class="hljs-property">Client</span>;<br><br><span class="hljs-keyword">const</span> conn = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Client</span>();<br>conn.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;ready&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  conn.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;ls -a&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stream</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (error) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`执行命令出错: <span class="hljs-subst">$&#123;error&#125;</span>`</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    stream.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">code, signal</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`子进程退出码: <span class="hljs-subst">$&#123;code&#125;</span>`</span>);<br>      conn.<span class="hljs-title function_">end</span>();<br>    &#125;).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`标准输出: <span class="hljs-subst">$&#123;data&#125;</span>`</span>);<br>    &#125;).<span class="hljs-property">stderr</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`错误输出: <span class="hljs-subst">$&#123;data&#125;</span>`</span>);<br>    &#125;);<br>  &#125;);<br>&#125;).<span class="hljs-title function_">connect</span>(&#123;<br>  <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;example.com&#x27;</span>,<br>  <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;username&#x27;</span>,<br>  <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;password&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="cross-spawn-模块"><a href="#cross-spawn-模块" class="headerlink" title="cross-spawn 模块"></a><code>cross-spawn</code> 模块</h2><p>这是一个跨平台的库，可以在 Windows 和 Unix 系统上执行 Shell 命令。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> spawn = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cross-spawn&#x27;</span>);<br><br><span class="hljs-keyword">const</span> ls = <span class="hljs-title function_">spawn</span>(<span class="hljs-string">&#x27;ls&#x27;</span>, [<span class="hljs-string">&#x27;-a&#x27;</span>]);<br>ls.<span class="hljs-property">stdout</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`标准输出: <span class="hljs-subst">$&#123;data&#125;</span>`</span>);<br>&#125;);<br>ls.<span class="hljs-property">stderr</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`错误输出: <span class="hljs-subst">$&#123;data&#125;</span>`</span>);<br>&#125;);<br>ls.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">code</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`子进程退出码: <span class="hljs-subst">$&#123;code&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="shell-exec-模块"><a href="#shell-exec-模块" class="headerlink" title="shell-exec 模块"></a><code>shell-exec</code> 模块</h2><p>这是另一个对 Shell 命令的封装，它提供了一个简单的接口来执行命令并处理输出。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> shellExec = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;shell-exec&#x27;</span>);<br><br>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">shellExec</span>(<span class="hljs-string">&#x27;ls -a&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (result.<span class="hljs-property">code</span> !== <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`执行命令出错: <span class="hljs-subst">$&#123;result.stderr&#125;</span>`</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`标准输出: <span class="hljs-subst">$&#123;result.stdout&#125;</span>`</span>);<br>&#125;)();<br></code></pre></td></tr></table></figure><p>当然，还有一些其他的方法：</p><h2 id="node-pty-模块-1"><a href="#node-pty-模块-1" class="headerlink" title="node-pty 模块"></a><code>node-pty</code> 模块</h2><p>这是一个能够让你生成一个伪终端并与其中运行 Shell 命令的库。它在计算机和服务器上都可以工作，并使你能够与 Shell 交互。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> os = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;os&#x27;</span>);<br><span class="hljs-keyword">const</span> pty = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-pty&#x27;</span>);<br><br><span class="hljs-keyword">const</span> term = pty.<span class="hljs-title function_">spawn</span>(os.<span class="hljs-title function_">platform</span>() === <span class="hljs-string">&#x27;win32&#x27;</span> ? <span class="hljs-string">&#x27;cmd.exe&#x27;</span> : <span class="hljs-string">&#x27;bash&#x27;</span>, [], &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xterm-color&#x27;</span>,<br>  <span class="hljs-attr">cwd</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">HOME</span>,<br>  <span class="hljs-attr">env</span>: process.<span class="hljs-property">env</span><br>&#125;);<br><br>term.<span class="hljs-title function_">onData</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`输出: <span class="hljs-subst">$&#123;data&#125;</span>`</span>);<br>&#125;);<br><br>term.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;ls\r&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="runas-模块"><a href="#runas-模块" class="headerlink" title="runas 模块"></a><code>runas</code> 模块</h2><p>这个库允许你在 Windows 系统上以管理员身份运行 Shell 命令。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> runas = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;runas&#x27;</span>);<br><br><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-title function_">runas</span>(<span class="hljs-string">&#x27;%windir%\\system32\\ipconfig.exe /all&#x27;</span>, &#123;<br>    <span class="hljs-attr">admin</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">hide</span>: <span class="hljs-literal">true</span><br>  &#125;);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`执行命令出错: <span class="hljs-subst">$&#123;error&#125;</span>`</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="node-cmd-模块"><a href="#node-cmd-模块" class="headerlink" title="node-cmd 模块"></a><code>node-cmd</code> 模块</h2><p>这是一个能够在 Node.js 中执行 Shell 命令的简单库，它提供了简洁的接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> cmd = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-cmd&#x27;</span>);<br><br>cmd.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;ls -a&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`执行命令出错: <span class="hljs-subst">$&#123;error&#125;</span>`</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`标准输出: <span class="hljs-subst">$&#123;stdout&#125;</span>`</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`错误输出: <span class="hljs-subst">$&#123;stderr&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>各语言执行Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C#执行Shell</title>
    <link href="/2023/09/10/C-Sharp%E6%89%A7%E8%A1%8CShell/"/>
    <url>/2023/09/10/C-Sharp%E6%89%A7%E8%A1%8CShell/</url>
    
    <content type="html"><![CDATA[<h1 id="C-执行Shell"><a href="#C-执行Shell" class="headerlink" title="C#执行Shell"></a>C#执行Shell</h1><p>在C#中执行Shell命令有多种方法</p><h2 id="使用System-Diagnostics-Process类："><a href="#使用System-Diagnostics-Process类：" class="headerlink" title="使用System.Diagnostics.Process类："></a>使用System.Diagnostics.Process类：</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">string</span> command = <span class="hljs-string">&quot;ipconfig&quot;</span>;<br>Process process = <span class="hljs-keyword">new</span> Process();<br>ProcessStartInfo startInfo = <span class="hljs-keyword">new</span> ProcessStartInfo();<br>startInfo.FileName = <span class="hljs-string">&quot;cmd.exe&quot;</span>;<br>startInfo.Arguments = <span class="hljs-string">&quot;/c &quot;</span> + command; <span class="hljs-comment">// 如果是使用 PowerShell 命令，则将 &quot;/c&quot; 改为 &quot;/k&quot;</span><br>startInfo.RedirectStandardOutput = <span class="hljs-literal">true</span>;<br>startInfo.UseShellExecute = <span class="hljs-literal">false</span>;<br>startInfo.CreateNoWindow = <span class="hljs-literal">true</span>;<br><br>process.StartInfo = startInfo;<br>process.Start();<br><br><span class="hljs-built_in">string</span> output = process.StandardOutput.ReadToEnd();<br><br>process.WaitForExit();<br></code></pre></td></tr></table></figure><h2 id="使用System-Diagnostics-Process类和PowerShell："><a href="#使用System-Diagnostics-Process类和PowerShell：" class="headerlink" title="使用System.Diagnostics.Process类和PowerShell："></a>使用System.Diagnostics.Process类和PowerShell：</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">string</span> command = <span class="hljs-string">&quot;Get-Process&quot;</span>;<br>Process process = <span class="hljs-keyword">new</span> Process();<br>ProcessStartInfo startInfo = <span class="hljs-keyword">new</span> ProcessStartInfo();<br>startInfo.FileName = <span class="hljs-string">&quot;powershell.exe&quot;</span>;<br>startInfo.Arguments = command;<br>startInfo.RedirectStandardOutput = <span class="hljs-literal">true</span>;<br>startInfo.UseShellExecute = <span class="hljs-literal">false</span>;<br>startInfo.CreateNoWindow = <span class="hljs-literal">true</span>;<br><br>process.StartInfo = startInfo;<br>process.Start();<br><br><span class="hljs-built_in">string</span> output = process.StandardOutput.ReadToEnd();<br><br>process.WaitForExit();<br></code></pre></td></tr></table></figure><h2 id="使用System-Management命名空间的ManagementObject类（需要引用System-Management-dll）："><a href="#使用System-Management命名空间的ManagementObject类（需要引用System-Management-dll）：" class="headerlink" title="使用System.Management命名空间的ManagementObject类（需要引用System.Management.dll）："></a>使用System.Management命名空间的ManagementObject类（需要引用System.Management.dll）：</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">string</span> command = <span class="hljs-string">&quot;ipconfig&quot;</span>;<br>ManagementClass processClass = <span class="hljs-keyword">new</span> ManagementClass(<span class="hljs-string">&quot;Win32_Process&quot;</span>);<br><span class="hljs-built_in">object</span>[] methodArgs = &#123; command, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-built_in">object</span> result = processClass.InvokeMethod(<span class="hljs-string">&quot;Create&quot;</span>, methodArgs);<br><span class="hljs-built_in">int</span> exitCode = Convert.ToInt32(result);<br></code></pre></td></tr></table></figure><p>当然，还有其他一些执行Shell命令的方法。以下是其中的两种：</p><h2 id="使用System-Diagnostics-Process类和WMI（Windows-Management-Instrumentation）："><a href="#使用System-Diagnostics-Process类和WMI（Windows-Management-Instrumentation）：" class="headerlink" title="使用System.Diagnostics.Process类和WMI（Windows Management Instrumentation）："></a>使用System.Diagnostics.Process类和WMI（Windows Management Instrumentation）：</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">string</span> command = <span class="hljs-string">&quot;ipconfig&quot;</span>;<br>Process process = <span class="hljs-keyword">new</span> Process();<br>ProcessStartInfo startInfo = <span class="hljs-keyword">new</span> ProcessStartInfo();<br>startInfo.FileName = <span class="hljs-string">&quot;cmd.exe&quot;</span>;<br>startInfo.Arguments = <span class="hljs-string">&quot;/c &quot;</span> + command; <span class="hljs-comment">// 如果是使用 PowerShell 命令，则将 &quot;/c&quot; 改为 &quot;/k&quot;</span><br>startInfo.RedirectStandardOutput = <span class="hljs-literal">true</span>;<br>startInfo.UseShellExecute = <span class="hljs-literal">false</span>;<br>startInfo.CreateNoWindow = <span class="hljs-literal">true</span>;<br><br>process.StartInfo = startInfo;<br>process.Start();<br><br><span class="hljs-built_in">string</span> output = process.StandardOutput.ReadToEnd();<br><br>process.WaitForExit();<br></code></pre></td></tr></table></figure><h2 id="使用Microsoft-VisualBasic-Interaction类："><a href="#使用Microsoft-VisualBasic-Interaction类：" class="headerlink" title="使用Microsoft.VisualBasic.Interaction类："></a>使用Microsoft.VisualBasic.Interaction类：</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">string</span> command = <span class="hljs-string">&quot;ipconfig&quot;</span>;<br><span class="hljs-built_in">string</span> output = Microsoft.VisualBasic.Interaction.Shell(command, AppWinStyle.Hide, <span class="hljs-literal">true</span>, <span class="hljs-number">-1</span>);<br></code></pre></td></tr></table></figure><h2 id="使用System-Runtime-InteropServices引用DLL文件："><a href="#使用System-Runtime-InteropServices引用DLL文件：" class="headerlink" title="使用System.Runtime.InteropServices引用DLL文件："></a>使用System.Runtime.InteropServices引用DLL文件：</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Runtime.InteropServices;<br><br>[<span class="hljs-meta">DllImport(<span class="hljs-string">&quot;kernel32.dll&quot;</span>, SetLastError = true)</span>]<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">CreateProcess</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> lpApplicationName, <span class="hljs-built_in">string</span> lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">                                        <span class="hljs-built_in">bool</span> bInheritHandles, <span class="hljs-built_in">uint</span> dwCreationFlags, IntPtr lpEnvironment, <span class="hljs-built_in">string</span> lpCurrentDirectory,</span></span><br><span class="hljs-params"><span class="hljs-function">                                        <span class="hljs-keyword">ref</span> STARTUPINFO lpStartupInfo, <span class="hljs-keyword">out</span> PROCESS_INFORMATION lpProcessInformation</span>)</span>;<br><br>[<span class="hljs-meta">DllImport(<span class="hljs-string">&quot;kernel32.dll&quot;</span>, SetLastError = true)</span>]<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WaitForSingleObject</span>(<span class="hljs-params">IntPtr hHandle, <span class="hljs-built_in">uint</span> dwMilliseconds</span>)</span>;<br><br><span class="hljs-keyword">struct</span> PROCESS_INFORMATION<br>&#123;<br>    <span class="hljs-keyword">public</span> IntPtr hProcess;<br>    <span class="hljs-keyword">public</span> IntPtr hThread;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwProcessId;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwThreadId;<br>&#125;<br><br><span class="hljs-keyword">struct</span> STARTUPINFO<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> cb;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> lpReserved;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> lpDesktop;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> lpTitle;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwX;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwY;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwXSize;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwYSize;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwXCountChars;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwYCountChars;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwFillAttribute;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwFlags;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">short</span> wShowWindow;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">short</span> cbReserved2;<br>    <span class="hljs-keyword">public</span> IntPtr lpReserved2;<br>    <span class="hljs-keyword">public</span> IntPtr hStdInput;<br>    <span class="hljs-keyword">public</span> IntPtr hStdOutput;<br>    <span class="hljs-keyword">public</span> IntPtr hStdError;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>&#123;<br>    <span class="hljs-built_in">string</span> command = <span class="hljs-string">&quot;ipconfig&quot;</span>;<br>    STARTUPINFO startupInfo = <span class="hljs-keyword">new</span> STARTUPINFO();<br>    PROCESS_INFORMATION processInfo = <span class="hljs-keyword">new</span> PROCESS_INFORMATION();<br>    <br>    <span class="hljs-built_in">bool</span> success = CreateProcess(<span class="hljs-literal">null</span>, command, IntPtr.Zero, IntPtr.Zero, <span class="hljs-literal">false</span>, <span class="hljs-number">0</span>, IntPtr.Zero, <span class="hljs-literal">null</span>, <span class="hljs-keyword">ref</span> startupInfo, <span class="hljs-keyword">out</span> processInfo);<br>    <span class="hljs-keyword">if</span> (success)<br>    &#123;<br>        WaitForSingleObject(processInfo.hProcess, <span class="hljs-number">0xFFFFFFFF</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方法使用了Platform Invoke技术，可以直接调用Windows的API函数来执行Shell命令。请注意，使用此方法需要在代码中引用System.Runtime.InteropServices命名空间，并确保正确设置结构体和函数调用。同样地，在执行Shell命令时，需要谨慎处理输入内容和安全问题。</p><p>当然，还有一种方法可以执行Shell命令：</p><h2 id="使用System-Diagnostics-Process类和PowerShell-Core："><a href="#使用System-Diagnostics-Process类和PowerShell-Core：" class="headerlink" title="使用System.Diagnostics.Process类和PowerShell Core："></a>使用System.Diagnostics.Process类和PowerShell Core：</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">string</span> command = <span class="hljs-string">&quot;ipconfig&quot;</span>;<br>Process process = <span class="hljs-keyword">new</span> Process();<br>ProcessStartInfo startInfo = <span class="hljs-keyword">new</span> ProcessStartInfo();<br>startInfo.FileName = <span class="hljs-string">&quot;pwsh.exe&quot;</span>; <span class="hljs-comment">// PowerShell Core的可执行文件路径</span><br>startInfo.Arguments = <span class="hljs-string">&quot;-Command &quot;</span> + command;<br>startInfo.RedirectStandardOutput = <span class="hljs-literal">true</span>;<br>startInfo.UseShellExecute = <span class="hljs-literal">false</span>;<br>startInfo.CreateNoWindow = <span class="hljs-literal">true</span>;<br><br>process.StartInfo = startInfo;<br>process.Start();<br><br><span class="hljs-built_in">string</span> output = process.StandardOutput.ReadToEnd();<br><br>process.WaitForExit();<br></code></pre></td></tr></table></figure><p>这种方法使用了PowerShell Core的可执行文件（<code>pwsh.exe</code>）来执行Shell命令。需要注意，你需要先安装并配置好PowerShell Core，并将其可执行文件的路径正确填写到代码中(或者添加到环境变量中)。</p><p>以上是使用C#执行Shell命令的几种常见方法，可以根据具体需求选择适合的方法进行操作。请务必确保输入内容的安全性，并谨慎处理可能存在的风险。</p>]]></content>
    
    
    <categories>
      
      <category>各语言执行Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust执行CMD</title>
    <link href="/2023/09/10/Rust%E6%89%A7%E8%A1%8CShell/"/>
    <url>/2023/09/10/Rust%E6%89%A7%E8%A1%8CShell/</url>
    
    <content type="html"><![CDATA[<h1 id="Rust执行Shell"><a href="#Rust执行Shell" class="headerlink" title="Rust执行Shell"></a>Rust执行Shell</h1><p>使用Cargo创建一个Rust项目。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::process::Command;  <br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_</span> = Command::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;cmd.exe&quot;</span>).<span class="hljs-title function_ invoke__">arg</span>(<span class="hljs-string">&quot;/c&quot;</span>).<span class="hljs-title function_ invoke__">arg</span>(<span class="hljs-string">&quot;pause&quot;</span>).<span class="hljs-title function_ invoke__">status</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>可以将 .arg(“pause”) 中的内容替换为其他命令。</p>]]></content>
    
    
    <categories>
      
      <category>各语言执行Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++执行Shell</title>
    <link href="/2023/09/09/C++%E6%89%A7%E8%A1%8CShell/"/>
    <url>/2023/09/09/C++%E6%89%A7%E8%A1%8CShell/</url>
    
    <content type="html"><![CDATA[<h1 id="C-执行Shell"><a href="#C-执行Shell" class="headerlink" title="C++执行Shell"></a>C++执行Shell</h1><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::string command = <span class="hljs-string">&quot;dir&quot;</span>; <span class="hljs-comment">// 将要执行的 cmd 命令(例如ipconfig，ping等)</span><br>    <span class="hljs-type">int</span> result = <span class="hljs-built_in">system</span>(command.<span class="hljs-built_in">c_str</span>()); <span class="hljs-comment">// 执行命令，并获得返回值</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Command result: &quot;</span> &lt;&lt; result &lt;&lt; std::endl; <span class="hljs-comment">// 输出返回值</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>示例代码将执行 dir 命令，并输出命令的返回值。</p>]]></content>
    
    
    <categories>
      
      <category>各语言执行Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C执行Shell</title>
    <link href="/2023/09/09/C%E6%89%A7%E8%A1%8CShell/"/>
    <url>/2023/09/09/C%E6%89%A7%E8%A1%8CShell/</url>
    
    <content type="html"><![CDATA[<h1 id="C执行Shell"><a href="#C执行Shell" class="headerlink" title="C执行Shell"></a>C执行Shell</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> command[<span class="hljs-number">1000</span>] = <span class="hljs-string">&quot;dir&quot;</span>; <span class="hljs-comment">// 将要执行的 cmd 命令</span><br>    FILE *fp = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">char</span> res[<span class="hljs-number">1024</span>];<br><br>    fp = popen(command, <span class="hljs-string">&quot;r&quot;</span>); <span class="hljs-comment">// 执行命令，并打开读取管道</span><br>     <br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-comment">// 判断是否成功打开管道</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;运行命令失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>     <br>    <span class="hljs-keyword">while</span> (fgets(res, <span class="hljs-keyword">sizeof</span>(res), fp) != <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-comment">// 从管道中读取输出结果</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, res);<br>    &#125;<br>    <br>    pclose(fp); <span class="hljs-comment">// 关闭管道</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这个示例代码将执行 dir 命令，并输出命令的输出结果。可以替换 command 变量的值为需要执行的命令。</p><p>这个实现使用了标准 C 库函数中的 popen() 和 pclose() 函数来执行命令和关闭读取管道。popen() 函数打开一个管道用于读取命令的输出，返回的文件指针 fp 可以用于读取管道中的内容。pclose() 函数关闭读取管道。</p>]]></content>
    
    
    <categories>
      
      <category>各语言执行Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Visual Basic调用Shell</title>
    <link href="/2023/09/09/Visual-Basic%E8%B0%83%E7%94%A8Shell/"/>
    <url>/2023/09/09/Visual-Basic%E8%B0%83%E7%94%A8Shell/</url>
    
    <content type="html"><![CDATA[<h1 id="Visual-Basic调用Shell"><a href="#Visual-Basic调用Shell" class="headerlink" title="Visual Basic调用Shell"></a>Visual Basic调用Shell</h1><p>使用Visual Studio创建一个Visual Basic项目，本文以控制台项目演示。</p><p>输入以下代码</p><figure class="highlight plaintext"><figcaption><span>basic</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs visual">Module Module1<br><br>    Sub Main()<br>        Shell(&quot;cmd.exe /c echo 1&amp;&amp;pause&quot;)<br>    End Sub<br><br>End Module<br></code></pre></td></tr></table></figure><p>Visual Studio可能自动生成了除shell以外的代码。</p><p>调整执行命令只需修改本代码段“echo 1”与“pause”即可。</p><hr><p>当然，以下是一个在 Windows 平台更好的方法。</p><p>代码如下：</p><figure class="highlight plaintext"><figcaption><span>basic</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs visual">Dim command As String<br>command = &quot;dir&quot;<br><br>Dim shell As Object<br>Set shell = CreateObject(&quot;WScript.Shell&quot;)<br><br>Dim exec As Object<br>Set exec = shell.Exec(&quot;cmd /c &quot; &amp; command)<br><br>Do While exec.Status = 0<br>    WScript.Sleep 100<br>Loop<br><br>Dim output As String<br>output = exec.StdOut.ReadAll<br><br>WScript.Echo output<br></code></pre></td></tr></table></figure><p>这段示例代码将执行 dir 命令，并在控制台输出命令的结果。你可以将需要执行的命令赋值给 command 变量。</p><p>本代码使用了 Windows Script Host 对象模型，通过 CreateObject() 函数创建了一个 WScript.Shell 对象，并调用其 Exec() 方法来执行 cmd 命令。Exec() 方法返回一个 WshScriptExec 对象，该对象的 Status 属性表示当前命令执行状态，StdOut 属性是一个 TextStream 对象，可以读取命令的输出结果。</p>]]></content>
    
    
    <categories>
      
      <category>各语言执行Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>针对九龙冰室的预制菜行为的反馈</title>
    <link href="/2023/09/08/%E9%92%88%E5%AF%B9%E4%B9%9D%E9%BE%99%E5%86%B0%E5%AE%A4%E7%9A%84%E9%A2%84%E5%88%B6%E8%8F%9C%E8%A1%8C%E4%B8%BA%E7%9A%84%E5%8F%8D%E9%A6%88/"/>
    <url>/2023/09/08/%E9%92%88%E5%AF%B9%E4%B9%9D%E9%BE%99%E5%86%B0%E5%AE%A4%E7%9A%84%E9%A2%84%E5%88%B6%E8%8F%9C%E8%A1%8C%E4%B8%BA%E7%9A%84%E5%8F%8D%E9%A6%88/</url>
    
    <content type="html"><![CDATA[<h1 id="针对九龙冰室不负责任的预制菜行为的回应"><a href="#针对九龙冰室不负责任的预制菜行为的回应" class="headerlink" title="针对九龙冰室不负责任的预制菜行为的回应"></a>针对九龙冰室不负责任的预制菜行为的回应</h1><p>本人(即灰风，不方便透露名字)在2023年8月31日中午十二点左右于上海市长宁区南丰城B1九龙冰室就餐，共消费62元，购买了一份鸡扒饭与灯胆奶茶。</p><p>在鸡扒饭上桌后，我尝了一下，边缘的米饭是凉的，我误以为是边缘处凉的较快，在之后我吃到里面的饭也是凉的，我感到十分不可思议。</p><p>在饭点，作为一家连锁粤菜餐厅，竟然上了一盘预制菜给我，这令我十分不解与震撼。当然，鸡扒饭里的肉和蛋都是当天现做，不过对于米饭预制这件事我由于当日下午还有其它事务没有与服务员过多纠缠，让他们热好就结账走了，九龙冰室服务员将他们灯胆奶茶的杯子赠与我以示歉意，我当时接受了，但我认为这是封口费。</p><p>事件讲述完毕，对此，我的回应是从2023年九月开始，本人以及所有工作室成员不会再前往九龙冰室，同时，也会与周边人士通知此事，祝你们品牌关门大吉！</p>]]></content>
    
    
    <categories>
      
      <category>公告</category>
      
    </categories>
    
    
    <tags>
      
      <tag>餐饮</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
