<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C#执行Shell</title>
    <link href="/2023/09/10/C-Sharp%E6%89%A7%E8%A1%8CShell/"/>
    <url>/2023/09/10/C-Sharp%E6%89%A7%E8%A1%8CShell/</url>
    
    <content type="html"><![CDATA[<h1 id="C-执行Shell"><a href="#C-执行Shell" class="headerlink" title="C#执行Shell"></a>C#执行Shell</h1><p>在C#中执行Shell命令有多种方法</p><h2 id="使用System-Diagnostics-Process类："><a href="#使用System-Diagnostics-Process类：" class="headerlink" title="使用System.Diagnostics.Process类："></a>使用System.Diagnostics.Process类：</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">string</span> command = <span class="hljs-string">&quot;ipconfig&quot;</span>;<br>Process process = <span class="hljs-keyword">new</span> Process();<br>ProcessStartInfo startInfo = <span class="hljs-keyword">new</span> ProcessStartInfo();<br>startInfo.FileName = <span class="hljs-string">&quot;cmd.exe&quot;</span>;<br>startInfo.Arguments = <span class="hljs-string">&quot;/c &quot;</span> + command; <span class="hljs-comment">// 如果是使用 PowerShell 命令，则将 &quot;/c&quot; 改为 &quot;/k&quot;</span><br>startInfo.RedirectStandardOutput = <span class="hljs-literal">true</span>;<br>startInfo.UseShellExecute = <span class="hljs-literal">false</span>;<br>startInfo.CreateNoWindow = <span class="hljs-literal">true</span>;<br><br>process.StartInfo = startInfo;<br>process.Start();<br><br><span class="hljs-built_in">string</span> output = process.StandardOutput.ReadToEnd();<br><br>process.WaitForExit();<br></code></pre></td></tr></table></figure><h2 id="使用System-Diagnostics-Process类和PowerShell："><a href="#使用System-Diagnostics-Process类和PowerShell：" class="headerlink" title="使用System.Diagnostics.Process类和PowerShell："></a>使用System.Diagnostics.Process类和PowerShell：</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">string</span> command = <span class="hljs-string">&quot;Get-Process&quot;</span>;<br>Process process = <span class="hljs-keyword">new</span> Process();<br>ProcessStartInfo startInfo = <span class="hljs-keyword">new</span> ProcessStartInfo();<br>startInfo.FileName = <span class="hljs-string">&quot;powershell.exe&quot;</span>;<br>startInfo.Arguments = command;<br>startInfo.RedirectStandardOutput = <span class="hljs-literal">true</span>;<br>startInfo.UseShellExecute = <span class="hljs-literal">false</span>;<br>startInfo.CreateNoWindow = <span class="hljs-literal">true</span>;<br><br>process.StartInfo = startInfo;<br>process.Start();<br><br><span class="hljs-built_in">string</span> output = process.StandardOutput.ReadToEnd();<br><br>process.WaitForExit();<br></code></pre></td></tr></table></figure><h2 id="使用System-Management命名空间的ManagementObject类（需要引用System-Management-dll）："><a href="#使用System-Management命名空间的ManagementObject类（需要引用System-Management-dll）：" class="headerlink" title="使用System.Management命名空间的ManagementObject类（需要引用System.Management.dll）："></a>使用System.Management命名空间的ManagementObject类（需要引用System.Management.dll）：</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">string</span> command = <span class="hljs-string">&quot;ipconfig&quot;</span>;<br>ManagementClass processClass = <span class="hljs-keyword">new</span> ManagementClass(<span class="hljs-string">&quot;Win32_Process&quot;</span>);<br><span class="hljs-built_in">object</span>[] methodArgs = &#123; command, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-built_in">object</span> result = processClass.InvokeMethod(<span class="hljs-string">&quot;Create&quot;</span>, methodArgs);<br><span class="hljs-built_in">int</span> exitCode = Convert.ToInt32(result);<br></code></pre></td></tr></table></figure><p>当然，还有其他一些执行Shell命令的方法。以下是其中的两种：</p><h2 id="使用System-Diagnostics-Process类和WMI（Windows-Management-Instrumentation）："><a href="#使用System-Diagnostics-Process类和WMI（Windows-Management-Instrumentation）：" class="headerlink" title="使用System.Diagnostics.Process类和WMI（Windows Management Instrumentation）："></a>使用System.Diagnostics.Process类和WMI（Windows Management Instrumentation）：</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">string</span> command = <span class="hljs-string">&quot;ipconfig&quot;</span>;<br>Process process = <span class="hljs-keyword">new</span> Process();<br>ProcessStartInfo startInfo = <span class="hljs-keyword">new</span> ProcessStartInfo();<br>startInfo.FileName = <span class="hljs-string">&quot;cmd.exe&quot;</span>;<br>startInfo.Arguments = <span class="hljs-string">&quot;/c &quot;</span> + command; <span class="hljs-comment">// 如果是使用 PowerShell 命令，则将 &quot;/c&quot; 改为 &quot;/k&quot;</span><br>startInfo.RedirectStandardOutput = <span class="hljs-literal">true</span>;<br>startInfo.UseShellExecute = <span class="hljs-literal">false</span>;<br>startInfo.CreateNoWindow = <span class="hljs-literal">true</span>;<br><br>process.StartInfo = startInfo;<br>process.Start();<br><br><span class="hljs-built_in">string</span> output = process.StandardOutput.ReadToEnd();<br><br>process.WaitForExit();<br></code></pre></td></tr></table></figure><h2 id="使用Microsoft-VisualBasic-Interaction类："><a href="#使用Microsoft-VisualBasic-Interaction类：" class="headerlink" title="使用Microsoft.VisualBasic.Interaction类："></a>使用Microsoft.VisualBasic.Interaction类：</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">string</span> command = <span class="hljs-string">&quot;ipconfig&quot;</span>;<br><span class="hljs-built_in">string</span> output = Microsoft.VisualBasic.Interaction.Shell(command, AppWinStyle.Hide, <span class="hljs-literal">true</span>, <span class="hljs-number">-1</span>);<br></code></pre></td></tr></table></figure><h2 id="使用System-Runtime-InteropServices引用DLL文件："><a href="#使用System-Runtime-InteropServices引用DLL文件：" class="headerlink" title="使用System.Runtime.InteropServices引用DLL文件："></a>使用System.Runtime.InteropServices引用DLL文件：</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Runtime.InteropServices;<br><br>[<span class="hljs-meta">DllImport(<span class="hljs-string">&quot;kernel32.dll&quot;</span>, SetLastError = true)</span>]<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">CreateProcess</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> lpApplicationName, <span class="hljs-built_in">string</span> lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">                                        <span class="hljs-built_in">bool</span> bInheritHandles, <span class="hljs-built_in">uint</span> dwCreationFlags, IntPtr lpEnvironment, <span class="hljs-built_in">string</span> lpCurrentDirectory,</span></span><br><span class="hljs-params"><span class="hljs-function">                                        <span class="hljs-keyword">ref</span> STARTUPINFO lpStartupInfo, <span class="hljs-keyword">out</span> PROCESS_INFORMATION lpProcessInformation</span>)</span>;<br><br>[<span class="hljs-meta">DllImport(<span class="hljs-string">&quot;kernel32.dll&quot;</span>, SetLastError = true)</span>]<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WaitForSingleObject</span>(<span class="hljs-params">IntPtr hHandle, <span class="hljs-built_in">uint</span> dwMilliseconds</span>)</span>;<br><br><span class="hljs-keyword">struct</span> PROCESS_INFORMATION<br>&#123;<br>    <span class="hljs-keyword">public</span> IntPtr hProcess;<br>    <span class="hljs-keyword">public</span> IntPtr hThread;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwProcessId;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwThreadId;<br>&#125;<br><br><span class="hljs-keyword">struct</span> STARTUPINFO<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> cb;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> lpReserved;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> lpDesktop;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> lpTitle;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwX;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwY;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwXSize;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwYSize;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwXCountChars;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwYCountChars;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwFillAttribute;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwFlags;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">short</span> wShowWindow;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">short</span> cbReserved2;<br>    <span class="hljs-keyword">public</span> IntPtr lpReserved2;<br>    <span class="hljs-keyword">public</span> IntPtr hStdInput;<br>    <span class="hljs-keyword">public</span> IntPtr hStdOutput;<br>    <span class="hljs-keyword">public</span> IntPtr hStdError;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>&#123;<br>    <span class="hljs-built_in">string</span> command = <span class="hljs-string">&quot;ipconfig&quot;</span>;<br>    STARTUPINFO startupInfo = <span class="hljs-keyword">new</span> STARTUPINFO();<br>    PROCESS_INFORMATION processInfo = <span class="hljs-keyword">new</span> PROCESS_INFORMATION();<br>    <br>    <span class="hljs-built_in">bool</span> success = CreateProcess(<span class="hljs-literal">null</span>, command, IntPtr.Zero, IntPtr.Zero, <span class="hljs-literal">false</span>, <span class="hljs-number">0</span>, IntPtr.Zero, <span class="hljs-literal">null</span>, <span class="hljs-keyword">ref</span> startupInfo, <span class="hljs-keyword">out</span> processInfo);<br>    <span class="hljs-keyword">if</span> (success)<br>    &#123;<br>        WaitForSingleObject(processInfo.hProcess, <span class="hljs-number">0xFFFFFFFF</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方法使用了Platform Invoke技术，可以直接调用Windows的API函数来执行Shell命令。请注意，使用此方法需要在代码中引用System.Runtime.InteropServices命名空间，并确保正确设置结构体和函数调用。同样地，在执行Shell命令时，需要谨慎处理输入内容和安全问题。</p><p>当然，还有一种方法可以执行Shell命令：</p><h2 id="使用System-Diagnostics-Process类和PowerShell-Core："><a href="#使用System-Diagnostics-Process类和PowerShell-Core：" class="headerlink" title="使用System.Diagnostics.Process类和PowerShell Core："></a>使用System.Diagnostics.Process类和PowerShell Core：</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">string</span> command = <span class="hljs-string">&quot;ipconfig&quot;</span>;<br>Process process = <span class="hljs-keyword">new</span> Process();<br>ProcessStartInfo startInfo = <span class="hljs-keyword">new</span> ProcessStartInfo();<br>startInfo.FileName = <span class="hljs-string">&quot;pwsh.exe&quot;</span>; <span class="hljs-comment">// PowerShell Core的可执行文件路径</span><br>startInfo.Arguments = <span class="hljs-string">&quot;-Command &quot;</span> + command;<br>startInfo.RedirectStandardOutput = <span class="hljs-literal">true</span>;<br>startInfo.UseShellExecute = <span class="hljs-literal">false</span>;<br>startInfo.CreateNoWindow = <span class="hljs-literal">true</span>;<br><br>process.StartInfo = startInfo;<br>process.Start();<br><br><span class="hljs-built_in">string</span> output = process.StandardOutput.ReadToEnd();<br><br>process.WaitForExit();<br></code></pre></td></tr></table></figure><p>这种方法使用了PowerShell Core的可执行文件（<code>pwsh.exe</code>）来执行Shell命令。需要注意，你需要先安装并配置好PowerShell Core，并将其可执行文件的路径正确填写到代码中(或者添加到环境变量中)。</p><p>以上是使用C#执行Shell命令的几种常见方法，可以根据具体需求选择适合的方法进行操作。请务必确保输入内容的安全性，并谨慎处理可能存在的风险。</p>]]></content>
    
    
    <categories>
      
      <category>各语言执行Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust执行CMD</title>
    <link href="/2023/09/10/Rust%E6%89%A7%E8%A1%8CShell/"/>
    <url>/2023/09/10/Rust%E6%89%A7%E8%A1%8CShell/</url>
    
    <content type="html"><![CDATA[<h1 id="Rust执行Shell"><a href="#Rust执行Shell" class="headerlink" title="Rust执行Shell"></a>Rust执行Shell</h1><p>使用Cargo创建一个Rust项目。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::process::Command;  <br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_</span> = Command::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;cmd.exe&quot;</span>).<span class="hljs-title function_ invoke__">arg</span>(<span class="hljs-string">&quot;/c&quot;</span>).<span class="hljs-title function_ invoke__">arg</span>(<span class="hljs-string">&quot;pause&quot;</span>).<span class="hljs-title function_ invoke__">status</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>可以将 .arg(“pause”) 中的内容替换为其他命令。</p>]]></content>
    
    
    <categories>
      
      <category>各语言执行Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++执行Shell</title>
    <link href="/2023/09/09/C++%E6%89%A7%E8%A1%8CShell/"/>
    <url>/2023/09/09/C++%E6%89%A7%E8%A1%8CShell/</url>
    
    <content type="html"><![CDATA[<h1 id="C-执行Shell"><a href="#C-执行Shell" class="headerlink" title="C++执行Shell"></a>C++执行Shell</h1><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::string command = <span class="hljs-string">&quot;dir&quot;</span>; <span class="hljs-comment">// 将要执行的 cmd 命令(例如ipconfig，ping等)</span><br>    <span class="hljs-type">int</span> result = <span class="hljs-built_in">system</span>(command.<span class="hljs-built_in">c_str</span>()); <span class="hljs-comment">// 执行命令，并获得返回值</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Command result: &quot;</span> &lt;&lt; result &lt;&lt; std::endl; <span class="hljs-comment">// 输出返回值</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>示例代码将执行 dir 命令，并输出命令的返回值。</p>]]></content>
    
    
    <categories>
      
      <category>各语言执行Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C执行Shell</title>
    <link href="/2023/09/09/C%E6%89%A7%E8%A1%8CShell/"/>
    <url>/2023/09/09/C%E6%89%A7%E8%A1%8CShell/</url>
    
    <content type="html"><![CDATA[<h1 id="C执行Shell"><a href="#C执行Shell" class="headerlink" title="C执行Shell"></a>C执行Shell</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> command[<span class="hljs-number">1000</span>] = <span class="hljs-string">&quot;dir&quot;</span>; <span class="hljs-comment">// 将要执行的 cmd 命令</span><br>    FILE *fp = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">char</span> res[<span class="hljs-number">1024</span>];<br><br>    fp = popen(command, <span class="hljs-string">&quot;r&quot;</span>); <span class="hljs-comment">// 执行命令，并打开读取管道</span><br>     <br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-comment">// 判断是否成功打开管道</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;运行命令失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>     <br>    <span class="hljs-keyword">while</span> (fgets(res, <span class="hljs-keyword">sizeof</span>(res), fp) != <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-comment">// 从管道中读取输出结果</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, res);<br>    &#125;<br>    <br>    pclose(fp); <span class="hljs-comment">// 关闭管道</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这个示例代码将执行 dir 命令，并输出命令的输出结果。可以替换 command 变量的值为需要执行的命令。</p><p>这个实现使用了标准 C 库函数中的 popen() 和 pclose() 函数来执行命令和关闭读取管道。popen() 函数打开一个管道用于读取命令的输出，返回的文件指针 fp 可以用于读取管道中的内容。pclose() 函数关闭读取管道。</p>]]></content>
    
    
    <categories>
      
      <category>各语言执行Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Visual Basic调用Shell</title>
    <link href="/2023/09/09/Visual-Basic%E8%B0%83%E7%94%A8Shell/"/>
    <url>/2023/09/09/Visual-Basic%E8%B0%83%E7%94%A8Shell/</url>
    
    <content type="html"><![CDATA[<h1 id="Visual-Basic调用Shell"><a href="#Visual-Basic调用Shell" class="headerlink" title="Visual Basic调用Shell"></a>Visual Basic调用Shell</h1><p>使用Visual Studio创建一个Visual Basic项目，本文以控制台项目演示。</p><p>输入以下代码</p><figure class="highlight plaintext"><figcaption><span>basic</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs visual">Module Module1<br><br>    Sub Main()<br>        Shell(&quot;cmd.exe /c echo 1&amp;&amp;pause&quot;)<br>    End Sub<br><br>End Module<br></code></pre></td></tr></table></figure><p>Visual Studio可能自动生成了除shell以外的代码。</p><p>调整执行命令只需修改本代码段“echo 1”与“pause”即可。</p><hr><p>当然，以下是一个在 Windows 平台更好的方法。</p><p>代码如下：</p><figure class="highlight plaintext"><figcaption><span>basic</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs visual">Dim command As String<br>command = &quot;dir&quot;<br><br>Dim shell As Object<br>Set shell = CreateObject(&quot;WScript.Shell&quot;)<br><br>Dim exec As Object<br>Set exec = shell.Exec(&quot;cmd /c &quot; &amp; command)<br><br>Do While exec.Status = 0<br>    WScript.Sleep 100<br>Loop<br><br>Dim output As String<br>output = exec.StdOut.ReadAll<br><br>WScript.Echo output<br></code></pre></td></tr></table></figure><p>这段示例代码将执行 dir 命令，并在控制台输出命令的结果。你可以将需要执行的命令赋值给 command 变量。</p><p>本代码使用了 Windows Script Host 对象模型，通过 CreateObject() 函数创建了一个 WScript.Shell 对象，并调用其 Exec() 方法来执行 cmd 命令。Exec() 方法返回一个 WshScriptExec 对象，该对象的 Status 属性表示当前命令执行状态，StdOut 属性是一个 TextStream 对象，可以读取命令的输出结果。</p>]]></content>
    
    
    <categories>
      
      <category>各语言执行Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>针对九龙冰室的预制菜行为的反馈</title>
    <link href="/2023/09/08/%E9%92%88%E5%AF%B9%E4%B9%9D%E9%BE%99%E5%86%B0%E5%AE%A4%E7%9A%84%E9%A2%84%E5%88%B6%E8%8F%9C%E8%A1%8C%E4%B8%BA%E7%9A%84%E5%8F%8D%E9%A6%88/"/>
    <url>/2023/09/08/%E9%92%88%E5%AF%B9%E4%B9%9D%E9%BE%99%E5%86%B0%E5%AE%A4%E7%9A%84%E9%A2%84%E5%88%B6%E8%8F%9C%E8%A1%8C%E4%B8%BA%E7%9A%84%E5%8F%8D%E9%A6%88/</url>
    
    <content type="html"><![CDATA[<h1 id="针对九龙冰室不负责任的预制菜行为的回应"><a href="#针对九龙冰室不负责任的预制菜行为的回应" class="headerlink" title="针对九龙冰室不负责任的预制菜行为的回应"></a>针对九龙冰室不负责任的预制菜行为的回应</h1><p>本人(即灰风，不方便透露名字)在2023年8月31日中午十二点左右于上海市长宁区南丰城B1九龙冰室就餐，共消费62元，购买了一份鸡扒饭与灯胆奶茶。</p><p>在鸡扒饭上桌后，我尝了一下，边缘的米饭是凉的，我误以为是边缘处凉的较快，在之后我吃到里面的饭也是凉的，我感到十分不可思议。</p><p>在饭点，作为一家连锁粤菜餐厅，竟然上了一盘预制菜给我，这令我十分不解与震撼。当然，鸡扒饭里的肉和蛋都是当天现做，不过对于米饭预制这件事我由于当日下午还有其它事务没有与服务员过多纠缠，让他们热好就结账走了，九龙冰室服务员将他们灯胆奶茶的杯子赠与我以示歉意，我当时接受了，但我认为这是封口费。</p><p>事件讲述完毕，对此，我的回应是从2023年九月开始，本人以及所有工作室成员不会再前往九龙冰室，同时，也会与周边人士通知此事，祝你们品牌关门大吉！</p>]]></content>
    
    
    <categories>
      
      <category>公告</category>
      
    </categories>
    
    
    <tags>
      
      <tag>餐饮</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
